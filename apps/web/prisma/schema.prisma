generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../../../data/cc.db"
}

model Project {
  id                String             @id
  name              String
  path              String
  cliType           String             @default("claude") @map("cli_type")
  cliModel          String?            @map("cli_model")
  cliCursorModel    String?            @map("cli_cursor_model")
  status            String             @default("active")
  port              Int?
  framework         String?
  pythonVersion     String?            @map("python_version")
  nodeVersion       String?            @map("node_version")
  githubRepoUrl     String?            @map("github_repo_url")
  githubBranch      String?            @map("github_branch")
  vercelProjectId   String?            @map("vercel_project_id")
  vercelTeamId      String?            @map("vercel_team_id")
  lastActMessageId  String?            @map("last_act_message_id")
  lastOpenedAt      DateTime           @default(now()) @map("last_opened_at")
  systemPrompt      String?            @map("system_prompt")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @map("updated_at")
  
  sessions          Session[]
  envVars           EnvVar[]
  projectServices   ProjectService[]
  messages          Message[]
  commits           Commit[]
  userRequests      UserRequest[]
  
  @@map("projects")
}

model Session {
  id                 String    @id @default(uuid())
  projectId          String    @map("project_id")
  sessionExternalId  String    @map("session_external_id")
  model              String
  totalTokens        Int       @default(0) @map("total_tokens")
  promptTokens       Int       @default(0) @map("prompt_tokens")
  completionTokens   Int       @default(0) @map("completion_tokens")
  durationMs         Int       @default(0) @map("duration_ms")
  toolUsagesCount    Int       @default(0) @map("tool_usages_count")
  createdAt          DateTime  @default(now()) @map("created_at")
  
  project            Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages           Message[]
  
  @@map("sessions")
}

model Message {
  id              String    @id @default(uuid())
  requestId       String?   @map("request_id")
  projectId       String    @map("project_id")
  sessionId       String?   @map("session_id")
  content         String
  role            String
  type            String
  status          String?
  errorMessage    String?   @map("error_message")
  parentMessageId String?   @map("parent_message_id")
  metadata        String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  session         Session?  @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userRequest     UserRequest? @relation(fields: [requestId], references: [id])
  
  @@index([projectId])
  @@index([sessionId])
  @@map("messages")
}

model UserRequest {
  id              String    @id @default(uuid())
  projectId       String    @map("project_id")
  requestType     String    @map("request_type")
  status          String    @default("pending")
  inputData       String?   @map("input_data")
  outputData      String?   @map("output_data")
  errorMessage    String?   @map("error_message")
  startedAt       DateTime  @default(now()) @map("started_at")
  completedAt     DateTime? @map("completed_at")
  durationMs      Int?      @map("duration_ms")
  
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages        Message[]
  
  @@index([projectId])
  @@index([status])
  @@map("user_requests")
}

model EnvVar {
  id          String    @id @default(uuid())
  projectId   String    @map("project_id")
  key         String
  value       String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, key])
  @@map("env_vars")
}

model ProjectService {
  id              String    @id @default(uuid())
  projectId       String    @map("project_id")
  serviceName     String    @map("service_name")
  connectionData  String    @map("connection_data")
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, serviceName])
  @@index([projectId])
  @@map("project_service_connections")
}

model Commit {
  id            String    @id @default(uuid())
  projectId     String    @map("project_id")
  commitHash    String    @map("commit_hash")
  message       String
  author        String?
  branch        String?
  timestamp     DateTime
  filesChanged  Int?      @map("files_changed")
  insertions    Int?
  deletions     Int?
  createdAt     DateTime  @default(now()) @map("created_at")
  
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("commits")
}

model Token {
  id            String    @id @default(uuid())
  serviceName   String    @unique @map("service_name")
  accessToken   String    @map("access_token")
  refreshToken  String?   @map("refresh_token")
  expiresAt     DateTime? @map("expires_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  @@map("service_tokens")
}